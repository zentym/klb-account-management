import React, { useState } from 'react';
import api from '../config/api';
import useKeycloakAuth from '../hooks/useKeycloakAuth';

interface LoanApplicationRequest {
    amount: number;
    term: number;
    purpose: string;
    monthlyIncome: number;
    employmentStatus: string;
    collateralValue?: number;
    collateralDescription?: string;
}

interface ApiResponse<T> {
    status: string;
    data: T;
    message: string;
}

export const LoanApplicationPage: React.FC = () => {
    const { userInfo } = useKeycloakAuth();
    const [formData, setFormData] = useState<LoanApplicationRequest>({
        amount: 0,
        term: 12,
        purpose: '',
        monthlyIncome: 0,
        employmentStatus: '',
        collateralValue: 0,
        collateralDescription: ''
    });

    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string>('');
    const [success, setSuccess] = useState<boolean>(false);

    // C√°c t√πy ch·ªçn c√≥ s·∫µn
    const loanPurposes = [
        'Mua nh√†',
        'Mua xe',
        'Kinh doanh',
        'H·ªçc t·∫≠p',
        'Du l·ªãch',
        'Y t·∫ø',
        'C·∫£i t·∫°o nh√†',
        'Kh√°c'
    ];

    const employmentStatuses = [
        'Nh√¢n vi√™n c√¥ng ty',
        'C√¥ng ch·ª©c',
        'Kinh doanh t·ª± do',
        'N√¥ng d√¢n',
        'Sinh vi√™n',
        'Kh√°c'
    ];

    const loanTerms = [
        { value: 6, label: '6 th√°ng' },
        { value: 12, label: '12 th√°ng' },
        { value: 24, label: '24 th√°ng' },
        { value: 36, label: '36 th√°ng' },
        { value: 48, label: '48 th√°ng' },
        { value: 60, label: '60 th√°ng' }
    ];

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: name === 'amount' || name === 'term' || name === 'monthlyIncome' || name === 'collateralValue'
                ? parseFloat(value) || 0
                : value
        }));
    };

    const formatCurrency = (amount: number) => {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    };

    const validateForm = (): boolean => {
        if (formData.amount <= 0) {
            setError('S·ªë ti·ªÅn vay ph·∫£i l·ªõn h∆°n 0');
            return false;
        }
        if (formData.amount > 10000000000) { // 10 t·ª∑ VND
            setError('S·ªë ti·ªÅn vay kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10 t·ª∑ VND');
            return false;
        }
        if (!formData.purpose.trim()) {
            setError('Vui l√≤ng ch·ªçn m·ª•c ƒë√≠ch vay');
            return false;
        }
        if (formData.monthlyIncome <= 0) {
            setError('Thu nh·∫≠p h√†ng th√°ng ph·∫£i l·ªõn h∆°n 0');
            return false;
        }
        if (!formData.employmentStatus.trim()) {
            setError('Vui l√≤ng ch·ªçn tr·∫°ng th√°i c√¥ng vi·ªác');
            return false;
        }

        // Ki·ªÉm tra kh·∫£ nƒÉng thanh to√°n (thu nh·∫≠p ph·∫£i √≠t nh·∫•t g·∫•p 3 l·∫ßn s·ªë ti·ªÅn tr·∫£ h√†ng th√°ng)
        const monthlyPayment = formData.amount / formData.term;
        if (formData.monthlyIncome < monthlyPayment * 3) {
            setError('Thu nh·∫≠p c·ªßa b·∫°n c√≥ th·ªÉ kh√¥ng ƒë·ªß ƒë·ªÉ thanh to√°n kho·∫£n vay n√†y. Vui l√≤ng gi·∫£m s·ªë ti·ªÅn ho·∫∑c tƒÉng th·ªùi h·∫°n vay.');
            return false;
        }

        return true;
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');
        setSuccess(false);

        if (!validateForm()) {
            return;
        }

        setLoading(true);

        try {
            console.log('üì§ Submitting loan application:', formData);

            // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒëi
            const requestData = {
                ...formData,
                // X√≥a c√°c tr∆∞·ªùng t√πy ch·ªçn n·∫øu kh√¥ng c√≥ gi√° tr·ªã
                collateralValue: formData.collateralValue || undefined,
                collateralDescription: formData.collateralDescription?.trim() || undefined
            };

            const response = await api.post<ApiResponse<any>>('/api/loans/apply', requestData);
            console.log('üì• Loan application response:', response.data);

            setSuccess(true);
            setError('');

            // Reset form
            setFormData({
                amount: 0,
                term: 12,
                purpose: '',
                monthlyIncome: 0,
                employmentStatus: '',
                collateralValue: 0,
                collateralDescription: ''
            });

        } catch (err: any) {
            console.error('‚ùå Error submitting loan application:', err);
            const errorMessage = err.response?.data?.message || err.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë∆°n vay';
            setError(errorMessage);
            setSuccess(false);
        } finally {
            setLoading(false);
        }
    };

    const calculateMonthlyPayment = () => {
        if (formData.amount && formData.term) {
            return formData.amount / formData.term;
        }
        return 0;
    };

    if (success) {
        return (
            <div style={{
                maxWidth: '600px',
                margin: '0 auto',
                padding: '40px 20px',
                textAlign: 'center'
            }}>
                <div style={{
                    backgroundColor: '#e8f5e8',
                    border: '1px solid #4caf50',
                    borderRadius: '8px',
                    padding: '30px',
                    marginBottom: '20px'
                }}>
                    <h2 style={{ color: '#2e7d32', marginBottom: '15px' }}>
                        ‚úÖ ƒê√£ g·ª≠i ƒë∆°n vay th√†nh c√¥ng!
                    </h2>
                    <p style={{ fontSize: '16px', marginBottom: '20px' }}>
                        ƒê∆°n vay c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng. Vui l√≤ng ch·ªù duy·ªát.
                    </p>
                    <p style={{ color: '#666', fontSize: '14px' }}>
                        Ch√∫ng t√¥i s·∫Ω xem x√©t h·ªì s∆° v√† li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 2-3 ng√†y l√†m vi·ªác.
                    </p>
                </div>

                <button
                    onClick={() => setSuccess(false)}
                    style={{
                        padding: '12px 24px',
                        backgroundColor: '#1976d2',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '16px',
                        marginRight: '10px'
                    }}
                >
                    G·ª≠i ƒë∆°n vay kh√°c
                </button>

                <button
                    onClick={() => window.location.href = '/dashboard'}
                    style={{
                        padding: '12px 24px',
                        backgroundColor: '#4caf50',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '16px'
                    }}
                >
                    V·ªÅ trang ch·ªß
                </button>
            </div>
        );
    }

    return (
        <div style={{
            maxWidth: '800px',
            margin: '0 auto',
            padding: '20px'
        }}>
            <h2 style={{
                textAlign: 'center',
                marginBottom: '30px',
                color: '#1976d2'
            }}>
                üí∞ ƒêƒÉng k√Ω kho·∫£n vay
            </h2>

            <div style={{
                backgroundColor: '#f8f9fa',
                padding: '20px',
                borderRadius: '8px',
                marginBottom: '20px'
            }}>
                <h4>üë§ Th√¥ng tin ng∆∞·ªùi vay</h4>
                <p><strong>T√™n:</strong> {userInfo?.username}</p>
                <p><strong>Email:</strong> {userInfo?.email || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
            </div>

            <form onSubmit={handleSubmit} style={{
                backgroundColor: 'white',
                padding: '30px',
                borderRadius: '8px',
                boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
            }}>
                {/* S·ªë ti·ªÅn vay */}
                <div style={{ marginBottom: '20px' }}>
                    <label style={{
                        display: 'block',
                        marginBottom: '8px',
                        fontWeight: 'bold'
                    }}>
                        S·ªë ti·ªÅn vay (VND) *
                    </label>
                    <input
                        type="number"
                        name="amount"
                        value={formData.amount || ''}
                        onChange={handleInputChange}
                        min="1000000"
                        max="10000000000"
                        step="1000000"
                        placeholder="V√≠ d·ª•: 100000000"
                        style={{
                            width: '100%',
                            padding: '12px',
                            border: '1px solid #ddd',
                            borderRadius: '4px',
                            fontSize: '16px'
                        }}
                        required
                    />
                    {formData.amount > 0 && (
                        <p style={{ color: '#666', fontSize: '14px', marginTop: '5px' }}>
                            {formatCurrency(formData.amount)}
                        </p>
                    )}
                </div>

                {/* Th·ªùi h·∫°n vay */}
                <div style={{ marginBottom: '20px' }}>
                    <label style={{
                        display: 'block',
                        marginBottom: '8px',
                        fontWeight: 'bold'
                    }}>
                        Th·ªùi h·∫°n vay *
                    </label>
                    <select
                        name="term"
                        value={formData.term}
                        onChange={handleInputChange}
                        style={{
                            width: '100%',
                            padding: '12px',
                            border: '1px solid #ddd',
                            borderRadius: '4px',
                            fontSize: '16px'
                        }}
                        required
                    >
                        {loanTerms.map(term => (
                            <option key={term.value} value={term.value}>
                                {term.label}
                            </option>
                        ))}
                    </select>
                </div>

                {/* S·ªë ti·ªÅn tr·∫£ h√†ng th√°ng d·ª± ki·∫øn */}
                {formData.amount > 0 && formData.term > 0 && (
                    <div style={{
                        backgroundColor: '#e3f2fd',
                        padding: '15px',
                        borderRadius: '4px',
                        marginBottom: '20px'
                    }}>
                        <p style={{ margin: 0, fontWeight: 'bold' }}>
                            üí° S·ªë ti·ªÅn tr·∫£ h√†ng th√°ng d·ª± ki·∫øn (ch∆∞a bao g·ªìm l√£i su·∫•t): {formatCurrency(calculateMonthlyPayment())}
                        </p>
                    </div>
                )}

                {/* M·ª•c ƒë√≠ch vay */}
                <div style={{ marginBottom: '20px' }}>
                    <label style={{
                        display: 'block',
                        marginBottom: '8px',
                        fontWeight: 'bold'
                    }}>
                        M·ª•c ƒë√≠ch vay *
                    </label>
                    <select
                        name="purpose"
                        value={formData.purpose}
                        onChange={handleInputChange}
                        style={{
                            width: '100%',
                            padding: '12px',
                            border: '1px solid #ddd',
                            borderRadius: '4px',
                            fontSize: '16px'
                        }}
                        required
                    >
                        <option value="">Ch·ªçn m·ª•c ƒë√≠ch vay</option>
                        {loanPurposes.map(purpose => (
                            <option key={purpose} value={purpose}>
                                {purpose}
                            </option>
                        ))}
                    </select>
                </div>

                {/* Thu nh·∫≠p h√†ng th√°ng */}
                <div style={{ marginBottom: '20px' }}>
                    <label style={{
                        display: 'block',
                        marginBottom: '8px',
                        fontWeight: 'bold'
                    }}>
                        Thu nh·∫≠p h√†ng th√°ng (VND) *
                    </label>
                    <input
                        type="number"
                        name="monthlyIncome"
                        value={formData.monthlyIncome || ''}
                        onChange={handleInputChange}
                        min="1000000"
                        step="1000000"
                        placeholder="V√≠ d·ª•: 20000000"
                        style={{
                            width: '100%',
                            padding: '12px',
                            border: '1px solid #ddd',
                            borderRadius: '4px',
                            fontSize: '16px'
                        }}
                        required
                    />
                    {formData.monthlyIncome > 0 && (
                        <p style={{ color: '#666', fontSize: '14px', marginTop: '5px' }}>
                            {formatCurrency(formData.monthlyIncome)}
                        </p>
                    )}
                </div>

                {/* Tr·∫°ng th√°i c√¥ng vi·ªác */}
                <div style={{ marginBottom: '20px' }}>
                    <label style={{
                        display: 'block',
                        marginBottom: '8px',
                        fontWeight: 'bold'
                    }}>
                        Tr·∫°ng th√°i c√¥ng vi·ªác *
                    </label>
                    <select
                        name="employmentStatus"
                        value={formData.employmentStatus}
                        onChange={handleInputChange}
                        style={{
                            width: '100%',
                            padding: '12px',
                            border: '1px solid #ddd',
                            borderRadius: '4px',
                            fontSize: '16px'
                        }}
                        required
                    >
                        <option value="">Ch·ªçn tr·∫°ng th√°i c√¥ng vi·ªác</option>
                        {employmentStatuses.map(status => (
                            <option key={status} value={status}>
                                {status}
                            </option>
                        ))}
                    </select>
                </div>

                {/* Th√¥ng tin t√†i s·∫£n ƒë·∫£m b·∫£o (t√πy ch·ªçn) */}
                <div style={{
                    border: '1px solid #e0e0e0',
                    borderRadius: '8px',
                    padding: '20px',
                    marginBottom: '20px',
                    backgroundColor: '#fafafa'
                }}>
                    <h4 style={{ marginBottom: '15px', color: '#666' }}>
                        üè† T√†i s·∫£n ƒë·∫£m b·∫£o (t√πy ch·ªçn)
                    </h4>

                    <div style={{ marginBottom: '15px' }}>
                        <label style={{
                            display: 'block',
                            marginBottom: '8px',
                            fontWeight: 'bold'
                        }}>
                            Gi√° tr·ªã t√†i s·∫£n (VND)
                        </label>
                        <input
                            type="number"
                            name="collateralValue"
                            value={formData.collateralValue || ''}
                            onChange={handleInputChange}
                            min="0"
                            step="1000000"
                            placeholder="V√≠ d·ª•: 500000000"
                            style={{
                                width: '100%',
                                padding: '12px',
                                border: '1px solid #ddd',
                                borderRadius: '4px',
                                fontSize: '16px'
                            }}
                        />
                        {formData.collateralValue && formData.collateralValue > 0 && (
                            <p style={{ color: '#666', fontSize: '14px', marginTop: '5px' }}>
                                {formatCurrency(formData.collateralValue)}
                            </p>
                        )}
                    </div>

                    <div>
                        <label style={{
                            display: 'block',
                            marginBottom: '8px',
                            fontWeight: 'bold'
                        }}>
                            M√¥ t·∫£ t√†i s·∫£n
                        </label>
                        <textarea
                            name="collateralDescription"
                            value={formData.collateralDescription || ''}
                            onChange={handleInputChange}
                            placeholder="V√≠ d·ª•: Nh√† ri√™ng t·∫°i Qu·∫≠n 1, TP.HCM, di·ªán t√≠ch 80m2..."
                            rows={3}
                            style={{
                                width: '100%',
                                padding: '12px',
                                border: '1px solid #ddd',
                                borderRadius: '4px',
                                fontSize: '16px',
                                resize: 'vertical'
                            }}
                        />
                    </div>
                </div>

                {/* Th√¥ng b√°o l·ªói */}
                {error && (
                    <div style={{
                        backgroundColor: '#ffebee',
                        border: '1px solid #f44336',
                        borderRadius: '4px',
                        padding: '12px',
                        marginBottom: '20px',
                        color: '#c62828'
                    }}>
                        ‚ùå {error}
                    </div>
                )}

                {/* Buttons */}
                <div style={{
                    display: 'flex',
                    gap: '15px',
                    justifyContent: 'center',
                    marginTop: '30px'
                }}>
                    <button
                        type="button"
                        onClick={() => window.history.back()}
                        style={{
                            padding: '12px 24px',
                            backgroundColor: '#6c757d',
                            color: 'white',
                            border: 'none',
                            borderRadius: '4px',
                            cursor: 'pointer',
                            fontSize: '16px'
                        }}
                    >
                        ‚Üê Quay l·∫°i
                    </button>

                    <button
                        type="submit"
                        disabled={loading}
                        style={{
                            padding: '12px 24px',
                            backgroundColor: loading ? '#ccc' : '#1976d2',
                            color: 'white',
                            border: 'none',
                            borderRadius: '4px',
                            cursor: loading ? 'not-allowed' : 'pointer',
                            fontSize: '16px'
                        }}
                    >
                        {loading ? '‚è≥ ƒêang g·ª≠i...' : '‚úàÔ∏è G·ª≠i ƒë∆°n vay'}
                    </button>
                </div>
            </form>
        </div>
    );
};

export default LoanApplicationPage;
