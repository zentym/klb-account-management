#!/usr/bin/env pwsh
# Script ƒë·ªÉ fix Keycloak roles v√† assign ADMIN role cho user

Write-Host "üîß KLB Keycloak Role Fixer" -ForegroundColor Cyan
Write-Host "==========================" -ForegroundColor Cyan

# Function ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
function Test-KeycloakConnection {
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:8090/realms/master/.well-known/openid-configuration" -Method Get -TimeoutSec 5
        return $true
    }
    catch {
        return $false
    }
}

Write-Host "`nüîç Step 1: Ki·ªÉm tra k·∫øt n·ªëi Keycloak..." -ForegroundColor Yellow

if (-not (Test-KeycloakConnection)) {
    Write-Host "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Keycloak t·∫°i http://localhost:8090" -ForegroundColor Red
    Write-Host "üîÑ ƒê·∫£m b·∫£o Keycloak ƒëang ch·∫°y: docker-compose up -d" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Keycloak ƒëang ho·∫°t ƒë·ªông!" -ForegroundColor Green

# L·∫•y admin token
Write-Host "`nüîë Step 2: L·∫•y admin access token..." -ForegroundColor Yellow

$tokenBody = @{
    "username" = "admin"
    "password" = "admin"
    "grant_type" = "password"
    "client_id" = "admin-cli"
}

try {
    $tokenResponse = Invoke-RestMethod -Uri "http://localhost:8090/realms/master/protocol/openid-connect/token" -Method Post -Body $tokenBody
    $adminToken = $tokenResponse.access_token
    Write-Host "‚úÖ Admin token l·∫•y th√†nh c√¥ng!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Kh√¥ng th·ªÉ l·∫•y admin token: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

$headers = @{
    "Authorization" = "Bearer $adminToken"
    "Content-Type" = "application/json"
}

# T·∫°o ADMIN role trong realm
Write-Host "`nüëë Step 3: T·∫°o ADMIN role trong Kienlongbank realm..." -ForegroundColor Yellow

$adminRoleData = @{
    name = "ADMIN"
    description = "Administrator role for full system access"
    clientRole = $false
} | ConvertTo-Json

try {
    Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/roles" -Method Post -Body $adminRoleData -Headers $headers
    Write-Host "‚úÖ ADMIN role ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è ADMIN role ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ùå L·ªói t·∫°o ADMIN role: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# T·∫°o USER role trong realm
Write-Host "`nüë§ Step 4: T·∫°o USER role trong Kienlongbank realm..." -ForegroundColor Yellow

$userRoleData = @{
    name = "USER"
    description = "Standard user role for basic access"
    clientRole = $false
} | ConvertTo-Json

try {
    Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/roles" -Method Post -Body $userRoleData -Headers $headers
    Write-Host "‚úÖ USER role ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è USER role ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ùå L·ªói t·∫°o USER role: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# L·∫•y user ID c·ªßa testuser
Write-Host "`nüîç Step 5: T√¨m user testuser..." -ForegroundColor Yellow

try {
    $users = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users?username=testuser" -Method Get -Headers $headers
    
    if ($users.Count -eq 0) {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y user testuser" -ForegroundColor Red
        exit 1
    }
    
    $userId = $users[0].id
    Write-Host "‚úÖ T√¨m th·∫•y user testuser (ID: $userId)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå L·ªói t√¨m ki·∫øm user: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# L·∫•y ADMIN role ID
Write-Host "`nüëë Step 6: L·∫•y ADMIN role information..." -ForegroundColor Yellow

try {
    $adminRole = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/roles/ADMIN" -Method Get -Headers $headers
    Write-Host "‚úÖ ADMIN role info: $($adminRole.name) - $($adminRole.description)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Kh√¥ng th·ªÉ l·∫•y ADMIN role: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Assign ADMIN role cho user
Write-Host "`nüéØ Step 7: Assign ADMIN role cho testuser..." -ForegroundColor Yellow

$roleAssignmentData = @(
    @{
        id = $adminRole.id
        name = $adminRole.name
        description = $adminRole.description
        clientRole = $false
    }
) | ConvertTo-Json

try {
    Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$userId/role-mappings/realm" -Method Post -Body $roleAssignmentData -Headers $headers
    Write-Host "‚úÖ ADMIN role ƒë√£ ƒë∆∞·ª£c assign cho testuser!" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è User ƒë√£ c√≥ ADMIN role" -ForegroundColor Blue
    } else {
        Write-Host "‚ùå L·ªói assign role: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# C·∫≠p nh·∫≠t client ƒë·ªÉ include realm roles trong token
Write-Host "`nüîß Step 8: C·∫•u h√¨nh client mappers cho realm roles..." -ForegroundColor Yellow

# L·∫•y klb-frontend client
try {
    $clients = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/clients?clientId=klb-frontend" -Method Get -Headers $headers
    
    if ($clients.Count -eq 0) {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y klb-frontend client" -ForegroundColor Red
        exit 1
    }
    
    $clientId = $clients[0].id
    Write-Host "‚úÖ T√¨m th·∫•y klb-frontend client (ID: $clientId)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå L·ªói t√¨m client: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# T·∫°o realm roles mapper
$realmRolesMapperData = @{
    name = "realm-roles"
    protocol = "openid-connect"
    protocolMapper = "oidc-usermodel-realm-role-mapper"
    consentRequired = $false
    config = @{
        "claim.name" = "realm_access.roles"
        "jsonType.label" = "String"
        "multivalued" = "true"
        "userinfo.token.claim" = "true"
        "access.token.claim" = "true"
        "id.token.claim" = "true"
    }
} | ConvertTo-Json -Depth 3

try {
    Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/clients/$clientId/protocol-mappers/models" -Method Post -Body $realmRolesMapperData -Headers $headers
    Write-Host "‚úÖ Realm roles mapper ƒë∆∞·ª£c t·∫°o!" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è Realm roles mapper ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ö†Ô∏è L·ªói t·∫°o mapper (c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i): $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Verification test
Write-Host "`n‚úÖ Step 9: Test verification..." -ForegroundColor Yellow

Write-Host "   üß™ Testing login with new roles..." -ForegroundColor Blue

$loginData = @{
    "username" = "testuser"
    "password" = "password123"
    "grant_type" = "password"
    "client_id" = "klb-frontend"
} 

try {
    $loginResponse = Invoke-RestMethod -Uri "http://localhost:8090/realms/Kienlongbank/protocol/openid-connect/token" -Method Post -Body $loginData -ContentType "application/x-www-form-urlencoded"
    
    $accessToken = $loginResponse.access_token
    Write-Host "   ‚úÖ Login successful v·ªõi token m·ªõi!" -ForegroundColor Green
    
    # Test admin endpoint
    $authHeaders = @{
        "Authorization" = "Bearer $accessToken"
        "Content-Type" = "application/json"
    }
    
    try {
        Write-Host "   üîê Testing admin endpoint..." -ForegroundColor Blue
        $adminResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/admin/hello" -Method Get -Headers $authHeaders
        Write-Host "   ‚úÖ Admin access: SUCCESS!" -ForegroundColor Green
        Write-Host "   üìù Response: $adminResponse" -ForegroundColor White
    } catch {
        $statusCode = $_.Exception.Response.StatusCode.value__
        Write-Host "   ‚ö†Ô∏è Admin access: Status $statusCode" -ForegroundColor Yellow
        if ($statusCode -eq 403) {
            Write-Host "   üîÑ Role mapping c√≥ th·ªÉ c·∫ßn th√™m th·ªùi gian ƒë·ªÉ √°p d·ª•ng" -ForegroundColor Blue
        }
    }
    
} catch {
    Write-Host "   ‚ùå Test login failed: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ Role configuration completed!" -ForegroundColor Green
Write-Host "üìã Summary c·ªßa changes:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Created ADMIN role in Kienlongbank realm" -ForegroundColor White
Write-Host "   ‚úÖ Created USER role in Kienlongbank realm" -ForegroundColor White
Write-Host "   ‚úÖ Assigned ADMIN role to testuser" -ForegroundColor White
Write-Host "   ‚úÖ Configured realm roles mapper for klb-frontend client" -ForegroundColor White

Write-Host "`nüîÑ Next steps:" -ForegroundColor Yellow
Write-Host "   1. Test l·∫°i b·∫±ng: powershell -ExecutionPolicy Bypass -File check-user-roles.ps1" -ForegroundColor White
Write-Host "   2. N·∫øu v·∫´n 403, restart Spring Boot services" -ForegroundColor White
Write-Host "   3. Ki·ªÉm tra JWT token c√≥ ch·ª©a ADMIN role ch∆∞a" -ForegroundColor White

Write-Host "`nüí° Note:" -ForegroundColor Blue
Write-Host "   C√≥ th·ªÉ c·∫ßn ƒë·ª£i v√†i gi√¢y ƒë·ªÉ role changes c√≥ hi·ªáu l·ª±c" -ForegroundColor Gray
Write-Host "   Ho·∫∑c logout/login l·∫°i trong frontend application" -ForegroundColor Gray
