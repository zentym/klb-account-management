// User Loan List API Integration Example
// File: loan-list-service.js

/**
 * Service ƒë·ªÉ qu·∫£n l√Ω API calls li√™n quan ƒë·∫øn danh s√°ch kho·∫£n vay c·ªßa user
 */
export class LoanListService {
    constructor(baseUrl = '/api', authService) {
        this.baseUrl = baseUrl;
        this.authService = authService;
    }

    /**
     * L·∫•y danh s√°ch kho·∫£n vay c·ªßa m·ªôt customer
     * @param {number} customerId - ID c·ªßa customer
     * @returns {Promise<Array>} Danh s√°ch kho·∫£n vay
     */
    async getCustomerLoans(customerId) {
        try {
            const token = await this.authService.getToken();
            const response = await fetch(`${this.baseUrl}/loans/customer/${customerId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || `HTTP ${response.status}: ${response.statusText}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Error fetching customer loans:', error);
            throw error;
        }
    }

    /**
     * L·∫•y danh s√°ch kho·∫£n vay c·ªßa user hi·ªán t·∫°i
     * @returns {Promise<Array>} Danh s√°ch kho·∫£n vay
     */
    async getCurrentUserLoans() {
        try {
            const currentUser = await this.authService.getCurrentUser();
            if (!currentUser || !currentUser.customerId) {
                throw new Error('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh customer ID c·ªßa user hi·ªán t·∫°i');
            }

            return await this.getCustomerLoans(currentUser.customerId);
        } catch (error) {
            console.error('Error fetching current user loans:', error);
            throw error;
        }
    }

    /**
     * Format tr·∫°ng th√°i kho·∫£n vay ƒë·ªÉ hi·ªÉn th·ªã
     * @param {string} status - Tr·∫°ng th√°i kho·∫£n vay
     * @returns {object} Object ch·ª©a text v√† class CSS
     */
    formatLoanStatus(status) {
        const statusMap = {
            'PENDING': { text: 'ƒêang ch·ªù ph√™ duy·ªát', class: 'status-pending' },
            'APPROVED': { text: 'ƒê√£ ph√™ duy·ªát', class: 'status-approved' },
            'REJECTED': { text: 'ƒê√£ t·ª´ ch·ªëi', class: 'status-rejected' },
            'DISBURSED': { text: 'ƒê√£ gi·∫£i ng√¢n', class: 'status-disbursed' },
            'CLOSED': { text: 'ƒê√£ ƒë√≥ng', class: 'status-closed' }
        };

        return statusMap[status] || { text: status, class: 'status-unknown' };
    }

    /**
     * Format s·ªë ti·ªÅn ƒë·ªÉ hi·ªÉn th·ªã
     * @param {number} amount - S·ªë ti·ªÅn
     * @returns {string} S·ªë ti·ªÅn ƒë√£ format
     */
    formatAmount(amount) {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    }

    /**
     * Format ng√†y th√°ng ƒë·ªÉ hi·ªÉn th·ªã
     * @param {string} dateString - Chu·ªói ng√†y th√°ng
     * @returns {string} Ng√†y th√°ng ƒë√£ format
     */
    formatDate(dateString) {
        if (!dateString) return 'N/A';

        return new Intl.DateTimeFormat('vi-VN', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        }).format(new Date(dateString));
    }
}

// React Hook ƒë·ªÉ s·ª≠ d·ª•ng v·ªõi React applications
export function useLoanList(authService) {
    const [loans, setLoans] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const loanService = useMemo(() => new LoanListService('/api', authService), [authService]);

    const fetchLoans = useCallback(async (customerId = null) => {
        setLoading(true);
        setError(null);

        try {
            const loansData = customerId
                ? await loanService.getCustomerLoans(customerId)
                : await loanService.getCurrentUserLoans();

            setLoans(loansData);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    }, [loanService]);

    return {
        loans,
        loading,
        error,
        fetchLoans,
        formatStatus: loanService.formatLoanStatus,
        formatAmount: loanService.formatAmount,
        formatDate: loanService.formatDate
    };
}

// React Component Example
export function LoanListComponent({ customerId, authService }) {
    const {
        loans,
        loading,
        error,
        fetchLoans,
        formatStatus,
        formatAmount,
        formatDate
    } = useLoanList(authService);

    useEffect(() => {
        fetchLoans(customerId);
    }, [fetchLoans, customerId]);

    if (loading) {
        return (
            <div className="loan-list-loading">
                <div className="spinner"></div>
                <p>ƒêang t·∫£i danh s√°ch kho·∫£n vay...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className="loan-list-error">
                <h3>C√≥ l·ªói x·∫£y ra</h3>
                <p>{error}</p>
                <button onClick={() => fetchLoans(customerId)}>
                    Th·ª≠ l·∫°i
                </button>
            </div>
        );
    }

    if (loans.length === 0) {
        return (
            <div className="loan-list-empty">
                <h3>Ch∆∞a c√≥ kho·∫£n vay n√†o</h3>
                <p>B·∫°n ch∆∞a ƒëƒÉng k√Ω kho·∫£n vay n√†o. H√£y b·∫Øt ƒë·∫ßu v·ªõi vi·ªác ƒëƒÉng k√Ω kho·∫£n vay ƒë·∫ßu ti√™n!</p>
                <button onClick={() => window.location.href = '/apply-loan'}>
                    ƒêƒÉng k√Ω kho·∫£n vay
                </button>
            </div>
        );
    }

    return (
        <div className="loan-list">
            <div className="loan-list-header">
                <h2>Danh s√°ch kho·∫£n vay</h2>
                <button
                    className="refresh-btn"
                    onClick={() => fetchLoans(customerId)}
                    title="L√†m m·ªõi danh s√°ch"
                >
                    üîÑ
                </button>
            </div>

            <div className="loan-list-summary">
                <p>T·ªïng c·ªông: <strong>{loans.length}</strong> kho·∫£n vay</p>
            </div>

            <div className="loan-list-items">
                {loans.map(loan => {
                    const status = formatStatus(loan.status);

                    return (
                        <div key={loan.id} className="loan-item">
                            <div className="loan-item-header">
                                <h3>Kho·∫£n vay #{loan.id}</h3>
                                <span className={`status-badge ${status.class}`}>
                                    {status.text}
                                </span>
                            </div>

                            <div className="loan-item-body">
                                <div className="loan-detail">
                                    <label>S·ªë ti·ªÅn vay:</label>
                                    <span className="amount">{formatAmount(loan.amount)}</span>
                                </div>

                                <div className="loan-detail">
                                    <label>L√£i su·∫•t:</label>
                                    <span>{loan.interestRate}% / nƒÉm</span>
                                </div>

                                <div className="loan-detail">
                                    <label>Th·ªùi h·∫°n:</label>
                                    <span>{loan.term} th√°ng</span>
                                </div>

                                <div className="loan-detail">
                                    <label>Ng√†y ƒëƒÉng k√Ω:</label>
                                    <span>{formatDate(loan.applicationDate)}</span>
                                </div>

                                {loan.approvalDate && (
                                    <div className="loan-detail">
                                        <label>Ng√†y ph√™ duy·ªát:</label>
                                        <span>{formatDate(loan.approvalDate)}</span>
                                    </div>
                                )}

                                {loan.rejectReason && (
                                    <div className="loan-detail reject-reason">
                                        <label>L√Ω do t·ª´ ch·ªëi:</label>
                                        <span className="reason-text">{loan.rejectReason}</span>
                                    </div>
                                )}
                            </div>

                            <div className="loan-item-actions">
                                <button
                                    className="btn-secondary"
                                    onClick={() => window.location.href = `/loans/${loan.id}`}
                                >
                                    Xem chi ti·∫øt
                                </button>

                                {loan.status === 'PENDING' && (
                                    <button
                                        className="btn-danger"
                                        onClick={() => handleCancelLoan(loan.id)}
                                    >
                                        H·ªßy ƒë∆°n vay
                                    </button>
                                )}
                            </div>
                        </div>
                    );
                })}
            </div>
        </div>
    );
}

// CSS Styles (to be added to your stylesheet)
const loanListStyles = `
.loan-list {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.loan-list-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.refresh-btn {
    background: none;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 8px 12px;
    cursor: pointer;
    font-size: 16px;
}

.loan-list-summary {
    margin-bottom: 20px;
    padding: 10px;
    background-color: #f8f9fa;
    border-radius: 4px;
}

.loan-item {
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 16px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.loan-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #ddd;
}

.status-badge {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
    text-transform: uppercase;
}

.status-pending { background-color: #fff3cd; color: #856404; }
.status-approved { background-color: #d4edda; color: #155724; }
.status-rejected { background-color: #f8d7da; color: #721c24; }
.status-disbursed { background-color: #d1ecf1; color: #0c5460; }
.status-closed { background-color: #e2e3e5; color: #383d41; }

.loan-item-body {
    padding: 20px;
}

.loan-detail {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
}

.loan-detail label {
    font-weight: 500;
    color: #666;
}

.amount {
    font-weight: bold;
    color: #007bff;
}

.reject-reason {
    flex-direction: column;
    background-color: #f8d7da;
    padding: 10px;
    border-radius: 4px;
    margin-top: 10px;
}

.reason-text {
    margin-top: 5px;
    font-style: italic;
    color: #721c24;
}

.loan-item-actions {
    padding: 16px 20px;
    background-color: #f8f9fa;
    border-top: 1px solid #ddd;
    display: flex;
    gap: 10px;
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
}

.btn-danger {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
}

.loan-list-loading, .loan-list-error, .loan-list-empty {
    text-align: center;
    padding: 40px 20px;
}

.spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #007bff;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
`;

export { loanListStyles };
