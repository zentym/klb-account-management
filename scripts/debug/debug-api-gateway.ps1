#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Debug v√† test API Gateway connections
    
.DESCRIPTION
    Script ƒë·ªÉ ki·ªÉm tra v√† debug connection t·ªõi c√°c APIs th√¥ng qua API Gateway
#>

Write-Host "üîç Debug API Gateway & Services..." -ForegroundColor Cyan
Write-Host ""

# Check Keycloak
Write-Host "1. üîê Ki·ªÉm tra Keycloak..." -ForegroundColor Yellow
try {
    $keycloakHealth = Invoke-WebRequest -Uri "http://localhost:8090/realms/master/.well-known/openid-configuration" -UseBasicParsing
    Write-Host "   ‚úÖ Keycloak OK (Status: $($keycloakHealth.StatusCode))" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Keycloak Error: $($_.Exception.Message)" -ForegroundColor Red
}

# Check API Gateway
Write-Host "2. üåê Ki·ªÉm tra API Gateway..." -ForegroundColor Yellow
try {
    $gatewayResponse = Invoke-WebRequest -Uri "http://localhost:8080/" -UseBasicParsing -TimeoutSec 3
    Write-Host "   ‚úÖ API Gateway responding (Status: $($gatewayResponse.StatusCode))" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "   ‚úÖ API Gateway OK - requires authentication" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå API Gateway Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Get token
Write-Host "3. üé´ L·∫•y authentication token..." -ForegroundColor Yellow
try {
    $tokenData = "username=0901234567&password=admin123&grant_type=password&client_id=klb-frontend"
    $tokenResponse = Invoke-RestMethod -Uri "http://localhost:8090/realms/Kienlongbank/protocol/openid-connect/token" -Method Post -Body $tokenData -ContentType "application/x-www-form-urlencoded"
    
    Write-Host "   ‚úÖ Token obtained successfully" -ForegroundColor Green
    Write-Host "   Token type: $($tokenResponse.token_type)" -ForegroundColor Gray
    Write-Host "   Expires in: $($tokenResponse.expires_in) seconds" -ForegroundColor Gray
    Write-Host "   Scope: $($tokenResponse.scope)" -ForegroundColor Gray
    
    $headers = @{
        "Authorization" = "$($tokenResponse.token_type) $($tokenResponse.access_token)"
        "Content-Type" = "application/json"
    }
    
} catch {
    Write-Host "   ‚ùå Token Error: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "4. üß™ Test c√°c API endpoints..." -ForegroundColor Yellow

# Test customers API
Write-Host "   üìù Test /api/customers (GET)..." -ForegroundColor White
try {
    $customersResponse = Invoke-WebRequest -Uri "http://localhost:8080/api/customers" -Method Get -Headers $headers -UseBasicParsing
    Write-Host "      ‚úÖ Success (Status: $($customersResponse.StatusCode))" -ForegroundColor Green
    
    $customers = $customersResponse.Content | ConvertFrom-Json
    if ($customers -and $customers.Count -gt 0) {
        Write-Host "      Found $($customers.Count) customers:" -ForegroundColor White
        $customers | ForEach-Object { 
            Write-Host "        - $($_.firstName) $($_.lastName) ($($_.phoneNumber))" -ForegroundColor Gray
        }
    } else {
        Write-Host "      No customers found (empty response)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "      ‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
    if ($_.Exception.Response) {
        Write-Host "      Status: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
        Write-Host "      Response: $($_.Exception.Response)" -ForegroundColor Red
    }
}

# Test accounts API
Write-Host "   üí≥ Test /api/accounts (GET)..." -ForegroundColor White
try {
    $accountsResponse = Invoke-WebRequest -Uri "http://localhost:8080/api/accounts" -Method Get -Headers $headers -UseBasicParsing
    Write-Host "      ‚úÖ Success (Status: $($accountsResponse.StatusCode))" -ForegroundColor Green
    
    $accounts = $accountsResponse.Content | ConvertFrom-Json
    if ($accounts -and $accounts.Count -gt 0) {
        Write-Host "      Found $($accounts.Count) accounts:" -ForegroundColor White
        $accounts | ForEach-Object { 
            Write-Host "        - Account: $($_.accountNumber), Balance: $($_.balance)" -ForegroundColor Gray
        }
    } else {
        Write-Host "      No accounts found (empty response)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "      ‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
    if ($_.Exception.Response) {
        Write-Host "      Status: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "5. üîç Ki·ªÉm tra services trong Docker..." -ForegroundColor Yellow
$runningServices = docker ps --format "table {{.Names}}\t{{.Status}}" | Select-String "klb-"
$runningServices | ForEach-Object {
    Write-Host "   $($_)" -ForegroundColor White
}

Write-Host ""
Write-Host "6. üìã K·∫øt lu·∫≠n..." -ForegroundColor Cyan
Write-Host "   - N·∫øu APIs tr·∫£ v·ªÅ 401: C√≥ th·ªÉ API Gateway ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng cho JWT validation" -ForegroundColor White
Write-Host "   - N·∫øu APIs tr·∫£ v·ªÅ empty data: Services ƒëang ho·∫°t ƒë·ªông nh∆∞ng ch∆∞a c√≥ d·ªØ li·ªáu" -ForegroundColor White  
Write-Host "   - N·∫øu APIs ho·∫°t ƒë·ªông: C√≥ th·ªÉ t·∫°o customer data th·ªß c√¥ng qua POST requests" -ForegroundColor White
