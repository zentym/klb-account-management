#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Thi·∫øt l·∫≠p d·ªØ li·ªáu kh√°ch h√†ng m·∫´u
    
.DESCRIPTION
    Script t·∫°o customer data v√† accounts m·∫´u cho h·ªá th·ªëng banking
    
.PARAMETER AdminPhone
    S·ªë ƒëi·ªán tho·∫°i c·ªßa admin user
    
.PARAMETER UserPhone
    S·ªë ƒëi·ªán tho·∫°i c·ªßa regular user
    
.PARAMETER AdminPassword
    M·∫≠t kh·∫©u c·ªßa admin user
    
.PARAMETER UserPassword
    M·∫≠t kh·∫©u c·ªßa regular user

.PARAMETER SkipAuth
    B·ªè qua x√°c th·ª±c v√† s·ª≠ d·ª•ng admin token tr·ª±c ti·∫øp
    
.EXAMPLE
    .\setup-customer-data.ps1
    
.EXAMPLE
    .\setup-customer-data.ps1 -AdminPhone "0901111111" -UserPhone "0902222222"
    
.EXAMPLE
    .\setup-customer-data.ps1 -SkipAuth
#>

param(
    [string]$AdminPhone = "0901234567",
    [string]$UserPhone = "0987654321",
    [string]$AdminPassword = "admin123",
    [string]$UserPassword = "password123",
    [switch]$SkipAuth
)

Write-Host "üë• Thi·∫øt l·∫≠p d·ªØ li·ªáu kh√°ch h√†ng m·∫´u..." -ForegroundColor Cyan
Write-Host ""

# Wait for services to be ready
Write-Host "‚è≥ Ch·ªù services s·∫µn s√†ng..." -ForegroundColor Yellow
$servicesReady = $false
$maxRetries = 30
$retryCount = 0

while (-not $servicesReady -and $retryCount -lt $maxRetries) {
    try {
        # Check main service
        $mainResponse = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -UseBasicParsing -TimeoutSec 3
        # Check customer service  
        $customerResponse = Invoke-WebRequest -Uri "http://localhost:8082/actuator/health" -UseBasicParsing -TimeoutSec 3
        
        if ($mainResponse.StatusCode -eq 200 -and $customerResponse.StatusCode -eq 200) {
            $servicesReady = $true
            Write-Host "‚úÖ T·∫•t c·∫£ services ƒë√£ s·∫µn s√†ng!" -ForegroundColor Green
        }
    } catch {
        $retryCount++
        Write-Host "‚è≥ ƒêang ch·ªù services... ($retryCount/$maxRetries)" -ForegroundColor Yellow
        Start-Sleep 3
    }
}

if (-not $servicesReady) {
    Write-Host "‚ùå Services ch∆∞a s·∫µn s√†ng. H√£y ƒë·∫£m b·∫£o docker-compose ƒë√£ ch·∫°y." -ForegroundColor Red
    Write-Host "üí° Ch·∫°y: cd kienlongbank-project && docker-compose up -d" -ForegroundColor Yellow
    exit 1
}

# Get authentication token
$apiHeaders = @{"Content-Type" = "application/json"}

if (-not $SkipAuth) {
    Write-Host "üîê L·∫•y token x√°c th·ª±c..." -ForegroundColor Yellow
    try {
        $tokenData = @{
            username = $AdminPhone
            password = $AdminPassword
            grant_type = "password"
            client_id = "klb-frontend"
        }
        
        $tokenBody = ($tokenData.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }) -join "&"
        $tokenResponse = Invoke-RestMethod -Uri "http://localhost:8090/realms/Kienlongbank/protocol/openid-connect/token" -Method Post -Body $tokenBody -ContentType "application/x-www-form-urlencoded"
        
        $accessToken = $tokenResponse.access_token
        $apiHeaders["Authorization"] = "Bearer $accessToken"
        
        Write-Host "‚úÖ ƒê√£ l·∫•y token x√°c th·ª±c" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y token x√°c th·ª±c: $($_.Exception.Message)" -ForegroundColor Yellow
        Write-Host "üîÑ S·ª≠ d·ª•ng ch·∫ø ƒë·ªô kh√¥ng x√°c th·ª±c..." -ForegroundColor Yellow
        # Continue without auth for testing
    }
} else {
    Write-Host "‚ÑπÔ∏è Ch·∫°y ·ªü ch·∫ø ƒë·ªô kh√¥ng x√°c th·ª±c" -ForegroundColor Blue
}

# Create customer data
Write-Host "üë• T·∫°o th√¥ng tin kh√°ch h√†ng..." -ForegroundColor Yellow

# Admin customer
$adminCustomer = @{
    firstName = "Nguy·ªÖn"
    lastName = "VƒÉn Admin"
    email = "admin@kienlongbank.com"
    phoneNumber = $AdminPhone
    address = "123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM"
    dateOfBirth = "1985-01-15"
    identityNumber = "123456789012"
    customerType = "PREMIUM"
    status = "ACTIVE"
} | ConvertTo-Json

Write-Host "üìù T·∫°o kh√°ch h√†ng Admin ($AdminPhone)..." -ForegroundColor Yellow
try {
    $adminCustomerResponse = Invoke-RestMethod -Uri "http://localhost:8082/api/customers" -Method Post -Body $adminCustomer -Headers $apiHeaders
    Write-Host "‚úÖ ƒê√£ t·∫°o kh√°ch h√†ng Admin (ID: $($adminCustomerResponse.id))" -ForegroundColor Green
    $adminCustomerId = $adminCustomerResponse.id
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è Kh√°ch h√†ng Admin ƒë√£ t·ªìn t·∫°i, l·∫•y th√¥ng tin..." -ForegroundColor Blue
        try {
            $existingCustomers = Invoke-RestMethod -Uri "http://localhost:8082/api/customers?phoneNumber=$AdminPhone" -Headers $apiHeaders
            if ($existingCustomers -and $existingCustomers.Count -gt 0) {
                $adminCustomerId = $existingCustomers[0].id
                Write-Host "‚úÖ T√¨m th·∫•y kh√°ch h√†ng Admin (ID: $adminCustomerId)" -ForegroundColor Green
            } else {
                $adminCustomerId = 1  # fallback ID
            }
        } catch {
            $adminCustomerId = 1  # fallback ID
        }
    } else {
        Write-Host "‚ö†Ô∏è L·ªói t·∫°o kh√°ch h√†ng Admin: $($_.Exception.Message)" -ForegroundColor Yellow
        $adminCustomerId = 1  # fallback ID
    }
}

# Regular customer
$regularCustomer = @{
    firstName = "Tr·∫ßn"
    lastName = "Th·ªã User"
    email = "user@kienlongbank.com" 
    phoneNumber = $UserPhone
    address = "456 ƒê∆∞·ªùng L√™ L·ª£i, Qu·∫≠n 3, TP.HCM"
    dateOfBirth = "1990-05-20"
    identityNumber = "987654321098"
    customerType = "STANDARD"
    status = "ACTIVE"
} | ConvertTo-Json

Write-Host "üìù T·∫°o kh√°ch h√†ng User ($UserPhone)..." -ForegroundColor Yellow
try {
    $regularCustomerResponse = Invoke-RestMethod -Uri "http://localhost:8082/api/customers" -Method Post -Body $regularCustomer -Headers $apiHeaders
    Write-Host "‚úÖ ƒê√£ t·∫°o kh√°ch h√†ng User (ID: $($regularCustomerResponse.id))" -ForegroundColor Green
    $regularCustomerId = $regularCustomerResponse.id
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è Kh√°ch h√†ng User ƒë√£ t·ªìn t·∫°i, l·∫•y th√¥ng tin..." -ForegroundColor Blue
        try {
            $existingCustomers = Invoke-RestMethod -Uri "http://localhost:8082/api/customers?phoneNumber=$UserPhone" -Headers $apiHeaders
            if ($existingCustomers -and $existingCustomers.Count -gt 0) {
                $regularCustomerId = $existingCustomers[0].id
                Write-Host "‚úÖ T√¨m th·∫•y kh√°ch h√†ng User (ID: $regularCustomerId)" -ForegroundColor Green
            } else {
                $regularCustomerId = 2  # fallback ID
            }
        } catch {
            $regularCustomerId = 2  # fallback ID
        }
    } else {
        Write-Host "‚ö†Ô∏è L·ªói t·∫°o kh√°ch h√†ng User: $($_.Exception.Message)" -ForegroundColor Yellow
        $regularCustomerId = 2  # fallback ID
    }
}

# Create sample accounts
Write-Host "üè¶ T·∫°o t√†i kho·∫£n ng√¢n h√†ng m·∫´u..." -ForegroundColor Yellow

# Admin account
$adminAccount = @{
    accountNumber = "001234567890"
    accountType = "SAVINGS"
    balance = 10000000.0
    customerId = $adminCustomerId
    status = "ACTIVE"
    currency = "VND"
} | ConvertTo-Json

Write-Host "üí≥ T·∫°o t√†i kho·∫£n Admin (001234567890)..." -ForegroundColor Yellow
try {
    $adminAccountResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/accounts" -Method Post -Body $adminAccount -Headers $apiHeaders
    Write-Host "‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n Admin: 001234567890 (S·ªë d∆∞: 10,000,000 VND)" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è T√†i kho·∫£n Admin ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ö†Ô∏è L·ªói t·∫°o t√†i kho·∫£n Admin: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Regular user account
$regularAccount = @{
    accountNumber = "009876543210"
    accountType = "CHECKING"
    balance = 5000000.0
    customerId = $regularCustomerId
    status = "ACTIVE"
    currency = "VND"
} | ConvertTo-Json

Write-Host "üí≥ T·∫°o t√†i kho·∫£n User (009876543210)..." -ForegroundColor Yellow
try {
    $regularAccountResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/accounts" -Method Post -Body $regularAccount -Headers $apiHeaders
    Write-Host "‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n User: 009876543210 (S·ªë d∆∞: 5,000,000 VND)" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è T√†i kho·∫£n User ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ö†Ô∏è L·ªói t·∫°o t√†i kho·∫£n User: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Create additional sample accounts
Write-Host "üè¶ T·∫°o th√™m t√†i kho·∫£n m·∫´u..." -ForegroundColor Yellow

# Admin checking account
$adminCheckingAccount = @{
    accountNumber = "001234567891"
    accountType = "CHECKING"
    balance = 2000000.0
    customerId = $adminCustomerId
    status = "ACTIVE"
    currency = "VND"
} | ConvertTo-Json

try {
    Invoke-RestMethod -Uri "http://localhost:8080/api/accounts" -Method Post -Body $adminCheckingAccount -Headers $apiHeaders
    Write-Host "‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n Checking cho Admin: 001234567891" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è T√†i kho·∫£n Checking Admin ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    }
}

# User savings account
$userSavingsAccount = @{
    accountNumber = "009876543211"
    accountType = "SAVINGS"
    balance = 1500000.0
    customerId = $regularCustomerId
    status = "ACTIVE"
    currency = "VND"
} | ConvertTo-Json

try {
    Invoke-RestMethod -Uri "http://localhost:8080/api/accounts" -Method Post -Body $userSavingsAccount -Headers $apiHeaders
    Write-Host "‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n Savings cho User: 009876543211" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è T√†i kho·∫£n Savings User ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    }
}

Write-Host ""
Write-Host "üéâ Thi·∫øt l·∫≠p d·ªØ li·ªáu kh√°ch h√†ng ho√†n t·∫•t!" -ForegroundColor Green
Write-Host ""
Write-Host "üë• Th√¥ng tin kh√°ch h√†ng ƒë√£ t·∫°o:" -ForegroundColor Cyan
Write-Host "   Admin: Nguy·ªÖn VƒÉn Admin" -ForegroundColor White
Write-Host "     - SƒêT: $AdminPhone" -ForegroundColor White
Write-Host "     - Email: admin@kienlongbank.com" -ForegroundColor White
Write-Host "     - CMND: 123456789012" -ForegroundColor White
Write-Host "   User: Tr·∫ßn Th·ªã User" -ForegroundColor White
Write-Host "     - SƒêT: $UserPhone" -ForegroundColor White
Write-Host "     - Email: user@kienlongbank.com" -ForegroundColor White
Write-Host "     - CMND: 987654321098" -ForegroundColor White
Write-Host ""
Write-Host "üè¶ T√†i kho·∫£n ƒë√£ t·∫°o:" -ForegroundColor Cyan
Write-Host "   Admin Savings: 001234567890 (10,000,000 VND)" -ForegroundColor White
Write-Host "   Admin Checking: 001234567891 (2,000,000 VND)" -ForegroundColor White
Write-Host "   User Checking: 009876543210 (5,000,000 VND)" -ForegroundColor White
Write-Host "   User Savings: 009876543211 (1,500,000 VND)" -ForegroundColor White
Write-Host ""
Write-Host "üîß Test commands:" -ForegroundColor Yellow
Write-Host "   .\quick-api-test.ps1" -ForegroundColor White
Write-Host "   .\test-api-tool.ps1 -Service all" -ForegroundColor White
Write-Host ""
