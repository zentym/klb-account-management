#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Setup Keycloak v·ªõi Phone Number Authentication
    
.DESCRIPTION
    Script c·∫≠p nh·∫≠t Keycloak ƒë·ªÉ h·ªó tr·ª£ ƒëƒÉng nh·∫≠p b·∫±ng s·ªë ƒëi·ªán tho·∫°i thay v√¨ username
    
.EXAMPLE
    .\setup-keycloak-phone.ps1
#>

Write-Host "üì± C·∫≠p nh·∫≠t Keycloak cho Phone Number Authentication..." -ForegroundColor Cyan
Write-Host ""

# Wait for Keycloak to be ready
Write-Host "‚è≥ Ch·ªù Keycloak s·∫µn s√†ng..." -ForegroundColor Yellow
do {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8090/realms/master/.well-known/openid-configuration" -UseBasicParsing -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Keycloak ƒë√£ s·∫µn s√†ng!" -ForegroundColor Green
            break
        }
    } catch {
        Write-Host "‚è≥ ƒêang ch·ªù Keycloak..." -ForegroundColor Yellow
        Start-Sleep 2
    }
} while ($true)

# Get admin token
Write-Host "üîë L·∫•y admin token..." -ForegroundColor Yellow
$tokenResponse = @{
    Uri = "http://localhost:8090/realms/master/protocol/openid-connect/token"
    Method = "Post"
    Headers = @{ "Content-Type" = "application/x-www-form-urlencoded" }
    Body = "username=admin&password=admin&grant_type=password&client_id=admin-cli"
}

try {
    $response = Invoke-RestMethod @tokenResponse
    $adminToken = $response.access_token
    
    if (-not $adminToken) {
        throw "No access token received"
    }
    
    Write-Host "‚úÖ ƒê√£ l·∫•y admin token" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Kh√¥ng th·ªÉ l·∫•y admin token: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üí° H√£y ƒë·∫£m b·∫£o Keycloak ƒëang ch·∫°y v√† admin credentials l√† 'admin/admin'" -ForegroundColor Yellow
    exit 1
}

$headers = @{
    "Authorization" = "Bearer $adminToken"
    "Content-Type" = "application/json"
}

# Create Kienlongbank realm if not exists
Write-Host "üèóÔ∏è T·∫°o Kienlongbank realm..." -ForegroundColor Yellow
$realmData = @{
    realm = "Kienlongbank"
    enabled = $true
    displayName = "Kien Long Bank - Phone Authentication"
    accessCodeLifespan = 300
    accessTokenLifespan = 3600
    refreshTokenMaxReuse = 0
    ssoSessionIdleTimeout = 1800
    ssoSessionMaxLifespan = 36000
} | ConvertTo-Json

try {
    Invoke-RestMethod -Uri "http://localhost:8090/admin/realms" -Method Post -Body $realmData -Headers $headers
    Write-Host "‚úÖ Realm ƒë√£ t·∫°o" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è Realm ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ùå L·ªói t·∫°o realm: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Create klb-frontend client
Write-Host "üîß T·∫°o klb-frontend client..." -ForegroundColor Yellow
$clientData = @{
    clientId = "klb-frontend"
    name = "KLB Frontend Application - Phone Auth"
    enabled = $true
    publicClient = $true
    directAccessGrantsEnabled = $true
    standardFlowEnabled = $true
    implicitFlowEnabled = $false
    serviceAccountsEnabled = $false
    redirectUris = @("http://localhost:3000/*")
    webOrigins = @("http://localhost:3000")
    protocol = "openid-connect"
    attributes = @{
        "login_theme" = "phone-login"
    }
} | ConvertTo-Json -Depth 3

try {
    Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/clients" -Method Post -Body $clientData -Headers $headers
    Write-Host "‚úÖ Frontend client ƒë√£ t·∫°o" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è Frontend client ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ùå L·ªói t·∫°o frontend client: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Create klb-backend-api client (confidential)
Write-Host "üîß T·∫°o klb-backend-api client..." -ForegroundColor Yellow
$backendClientData = @{
    clientId = "klb-backend-api"
    name = "KLB Backend API - Phone Auth"
    enabled = $true
    publicClient = $false
    directAccessGrantsEnabled = $true
    standardFlowEnabled = $true
    implicitFlowEnabled = $false
    serviceAccountsEnabled = $true
    bearerOnly = $false
    protocol = "openid-connect"
    attributes = @{
        "access.token.lifespan" = "3600"
        "phone.number.required" = "true"
    }
} | ConvertTo-Json -Depth 3

try {
    Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/clients" -Method Post -Body $backendClientData -Headers $headers
    Write-Host "‚úÖ Backend client ƒë√£ t·∫°o" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è Backend client ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ùå L·ªói t·∫°o backend client: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Create realm roles
Write-Host "üîß T·∫°o realm roles..." -ForegroundColor Yellow
$roles = @("USER", "ADMIN")

foreach ($roleName in $roles) {
    $roleData = @{
        name = $roleName
        description = "Role for $roleName access - Phone Auth"
    } | ConvertTo-Json
    
    try {
        Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/roles" -Method Post -Body $roleData -Headers $headers
        Write-Host "‚úÖ Role '$roleName' ƒë√£ t·∫°o" -ForegroundColor Green
    } catch {
        if ($_.Exception.Response.StatusCode -eq 409) {
            Write-Host "‚ÑπÔ∏è Role '$roleName' ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
        } else {
            Write-Host "‚ùå L·ªói t·∫°o role '$roleName': $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

# Delete existing phone-based users if they exist
Write-Host "üßπ X√≥a users c≈© n·∫øu c√≥..." -ForegroundColor Yellow
$phoneUsers = @("0901234567", "0987654321")
foreach ($phoneUser in $phoneUsers) {
    try {
        $existingUsers = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users?username=$phoneUser" -Headers $headers
        if ($existingUsers.Count -gt 0) {
            $userId = $existingUsers[0].id
            Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$userId" -Method Delete -Headers $headers
            Write-Host "üóëÔ∏è ƒê√£ x√≥a user: $phoneUser" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ÑπÔ∏è User $phoneUser kh√¥ng t·ªìn t·∫°i" -ForegroundColor Blue
    }
}

# Create phone-based admin user
Write-Host "üë§ T·∫°o Admin user v·ªõi SƒêT: 0901234567..." -ForegroundColor Yellow
$adminUserData = @{
    username = "0901234567"
    email = "admin@kienlongbank.com"
    firstName = "Admin"
    lastName = "User"
    enabled = $true
    attributes = @{
        phoneNumber = @("0901234567")
        userType = @("ADMIN")
    }
    credentials = @(
        @{
            type = "password"
            value = "admin123"
            temporary = $false
        }
    )
} | ConvertTo-Json -Depth 3

try {
    Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users" -Method Post -Body $adminUserData -Headers $headers
    Write-Host "‚úÖ Admin user ƒë√£ t·∫°o: 0901234567 / admin123" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è Admin user ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ùå L·ªói t·∫°o admin user: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Create phone-based regular user
Write-Host "üë§ T·∫°o Regular user v·ªõi SƒêT: 0987654321..." -ForegroundColor Yellow
$regularUserData = @{
    username = "0987654321"
    email = "user@kienlongbank.com"
    firstName = "Regular"
    lastName = "User"
    enabled = $true
    attributes = @{
        phoneNumber = @("0987654321")
        userType = @("USER")
    }
    credentials = @(
        @{
            type = "password"
            value = "password123"
            temporary = $false
        }
    )
} | ConvertTo-Json -Depth 3

try {
    Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users" -Method Post -Body $regularUserData -Headers $headers
    Write-Host "‚úÖ Regular user ƒë√£ t·∫°o: 0987654321 / password123" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 409) {
        Write-Host "‚ÑπÔ∏è Regular user ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
    } else {
        Write-Host "‚ùå L·ªói t·∫°o regular user: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Assign ADMIN role to admin user
Write-Host "üîê G√°n ADMIN role cho admin user..." -ForegroundColor Yellow
try {
    # Get admin user ID
    $adminUsers = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users?username=0901234567" -Headers $headers
    if ($adminUsers.Count -gt 0) {
        $adminUserId = $adminUsers[0].id
        
        # Get ADMIN role
        $adminRole = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/roles/ADMIN" -Headers $headers
        
        # Check if user already has ADMIN role
        $currentRoles = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$adminUserId/role-mappings/realm" -Headers $headers
        $hasAdminRole = $currentRoles | Where-Object { $_.name -eq "ADMIN" }
        
        if ($hasAdminRole) {
            Write-Host "‚úÖ ADMIN role ƒë√£ ƒë∆∞·ª£c g√°n cho 0901234567" -ForegroundColor Green
        } else {
            # Use correct format for role assignment (like in setup-keycloak.ps1)
            $roleAssignment = "[{`"id`":`"$($adminRole.id)`",`"name`":`"ADMIN`",`"description`":`"Role for ADMIN access - Phone Auth`",`"composite`":false}]"
            
            $response = Invoke-WebRequest -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$adminUserId/role-mappings/realm" -Method Post -Body $roleAssignment -Headers $headers -UseBasicParsing
            
            if ($response.StatusCode -eq 204 -or $response.StatusCode -eq 200) {
                Write-Host "‚úÖ ADMIN role ƒë√£ g√°n cho 0901234567" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è Unexpected response code: $($response.StatusCode)" -ForegroundColor Yellow
            }
        }
    }
} catch {
    Write-Host "‚ö†Ô∏è Kh√¥ng th·ªÉ g√°n ADMIN role: $($_.Exception.Message)" -ForegroundColor Yellow
    # Try alternative approach
    Write-Host "üîÑ Th·ª≠ ph∆∞∆°ng ph√°p g√°n role kh√°c..." -ForegroundColor Yellow
    try {
        Start-Sleep -Seconds 1
        $adminUsers = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users?username=0901234567" -Headers $headers
        if ($adminUsers.Count -gt 0) {
            $adminUserId = $adminUsers[0].id
            $adminRole = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/roles/ADMIN" -Headers $headers
            
            # Simple role assignment with minimal data
            $simpleRoleData = @(
                @{
                    id = $adminRole.id
                    name = "ADMIN"
                }
            ) | ConvertTo-Json -Depth 2 -Compress
            
            Invoke-WebRequest -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$adminUserId/role-mappings/realm" -Method Post -Body $simpleRoleData -Headers $headers -UseBasicParsing
            Write-Host "‚úÖ ADMIN role ƒë√£ g√°n qua ph∆∞∆°ng ph√°p thay th·∫ø" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ùå L·ªói g√°n ADMIN role qua ph∆∞∆°ng ph√°p thay th·∫ø: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Assign USER role to regular user
Write-Host "üîê G√°n USER role cho regular user..." -ForegroundColor Yellow
try {
    # Get regular user ID
    $regularUsers = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users?username=0987654321" -Headers $headers
    if ($regularUsers.Count -gt 0) {
        $regularUserId = $regularUsers[0].id
        
        # Get USER role
        $userRole = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/roles/USER" -Headers $headers
        
        # Check if user already has USER role
        $currentRoles = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$regularUserId/role-mappings/realm" -Headers $headers
        $hasUserRole = $currentRoles | Where-Object { $_.name -eq "USER" }
        
        if ($hasUserRole) {
            Write-Host "‚úÖ USER role ƒë√£ ƒë∆∞·ª£c g√°n cho 0987654321" -ForegroundColor Green
        } else {
            # Use correct format for role assignment (like in setup-keycloak.ps1)
            $roleAssignment = "[{`"id`":`"$($userRole.id)`",`"name`":`"USER`",`"description`":`"Role for USER access - Phone Auth`",`"composite`":false}]"
            
            $response = Invoke-WebRequest -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$regularUserId/role-mappings/realm" -Method Post -Body $roleAssignment -Headers $headers -UseBasicParsing
            
            if ($response.StatusCode -eq 204 -or $response.StatusCode -eq 200) {
                Write-Host "‚úÖ USER role ƒë√£ g√°n cho 0987654321" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è Unexpected response code: $($response.StatusCode)" -ForegroundColor Yellow
            }
        }
    }
} catch {
    Write-Host "‚ö†Ô∏è Kh√¥ng th·ªÉ g√°n USER role: $($_.Exception.Message)" -ForegroundColor Yellow
    # Try alternative approach
    Write-Host "üîÑ Th·ª≠ ph∆∞∆°ng ph√°p g√°n role kh√°c..." -ForegroundColor Yellow
    try {
        Start-Sleep -Seconds 1
        $regularUsers = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users?username=0987654321" -Headers $headers
        if ($regularUsers.Count -gt 0) {
            $regularUserId = $regularUsers[0].id
            $userRole = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/roles/USER" -Headers $headers
            
            # Simple role assignment with minimal data
            $simpleRoleData = @(
                @{
                    id = $userRole.id
                    name = "USER"
                }
            ) | ConvertTo-Json -Depth 2 -Compress
            
            Invoke-WebRequest -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$regularUserId/role-mappings/realm" -Method Post -Body $simpleRoleData -Headers $headers -UseBasicParsing
            Write-Host "‚úÖ USER role ƒë√£ g√°n qua ph∆∞∆°ng ph√°p thay th·∫ø" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ùå L·ªói g√°n USER role qua ph∆∞∆°ng ph√°p thay th·∫ø: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Verify users and roles
Write-Host "üîç X√°c minh c·∫•u h√¨nh..." -ForegroundColor Yellow
try {
    # Check admin user
    $adminUsers = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users?username=0901234567" -Headers $headers
    if ($adminUsers.Count -gt 0) {
        $adminUserId = $adminUsers[0].id
        $adminRoles = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$adminUserId/role-mappings/realm" -Headers $headers
        $hasAdminRole = $adminRoles | Where-Object { $_.name -eq "ADMIN" }
        
        if ($hasAdminRole) {
            Write-Host "‚úÖ Admin user (0901234567) c√≥ ADMIN role" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Admin user thi·∫øu ADMIN role" -ForegroundColor Yellow
        }
    }
    
    # Check regular user
    $regularUsers = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users?username=0987654321" -Headers $headers
    if ($regularUsers.Count -gt 0) {
        $regularUserId = $regularUsers[0].id
        $regularRoles = Invoke-RestMethod -Uri "http://localhost:8090/admin/realms/Kienlongbank/users/$regularUserId/role-mappings/realm" -Headers $headers
        $hasUserRole = $regularRoles | Where-Object { $_.name -eq "USER" }
        
        if ($hasUserRole) {
            Write-Host "‚úÖ Regular user (0987654321) c√≥ USER role" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Regular user thi·∫øu USER role" -ForegroundColor Yellow
        }
    }
} catch {
    Write-Host "‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c minh role assignment: $($_.Exception.Message)" -ForegroundColor Yellow
}

Write-Host ""
# Setup customer data in backend services
Write-Host "üìä Thi·∫øt l·∫≠p th√¥ng tin kh√°ch h√†ng..." -ForegroundColor Yellow

# Wait for services to be ready
Write-Host "‚è≥ Ch·ªù services s·∫µn s√†ng..." -ForegroundColor Yellow
$servicesReady = $false
$maxRetries = 30
$retryCount = 0

while (-not $servicesReady -and $retryCount -lt $maxRetries) {
    try {
        # Check main service
        $mainResponse = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -UseBasicParsing -TimeoutSec 3
        # Check customer service  
        $customerResponse = Invoke-WebRequest -Uri "http://localhost:8082/actuator/health" -UseBasicParsing -TimeoutSec 3
        
        if ($mainResponse.StatusCode -eq 200 -and $customerResponse.StatusCode -eq 200) {
            $servicesReady = $true
            Write-Host "‚úÖ T·∫•t c·∫£ services ƒë√£ s·∫µn s√†ng!" -ForegroundColor Green
        }
    } catch {
        $retryCount++
        Write-Host "‚è≥ ƒêang ch·ªù services... ($retryCount/$maxRetries)" -ForegroundColor Yellow
        Start-Sleep 3
    }
}

if (-not $servicesReady) {
    Write-Host "‚ö†Ô∏è Services ch∆∞a s·∫µn s√†ng, b·ªè qua setup customer data" -ForegroundColor Yellow
} else {
    # Get authentication token for API calls
    Write-Host "üîê L·∫•y token ƒë·ªÉ g·ªçi API..." -ForegroundColor Yellow
    try {
        $tokenData = @{
            username = "0901234567"
            password = "admin123"
            grant_type = "password"
            client_id = "klb-frontend"
        }
        
        $tokenBody = ($tokenData.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }) -join "&"
        $tokenResponse = Invoke-RestMethod -Uri "http://localhost:8090/realms/Kienlongbank/protocol/openid-connect/token" -Method Post -Body $tokenBody -ContentType "application/x-www-form-urlencoded"
        
        $accessToken = $tokenResponse.access_token
        $apiHeaders = @{
            "Authorization" = "Bearer $accessToken"
            "Content-Type" = "application/json"
        }
        
        Write-Host "‚úÖ ƒê√£ l·∫•y API token" -ForegroundColor Green
        
        # Create customer data
        Write-Host "üë• T·∫°o th√¥ng tin kh√°ch h√†ng..." -ForegroundColor Yellow
        
        # Admin customer
        $adminCustomer = @{
            firstName = "Nguy·ªÖn"
            lastName = "VƒÉn Admin"
            email = "admin@kienlongbank.com"
            phoneNumber = "0901234567"
            address = "123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, Q1, TP.HCM"
            dateOfBirth = "1985-01-15"
            identityNumber = "123456789"
        } | ConvertTo-Json
        
        try {
            $adminCustomerResponse = Invoke-RestMethod -Uri "http://localhost:8082/api/customers" -Method Post -Body $adminCustomer -Headers $apiHeaders
            Write-Host "‚úÖ ƒê√£ t·∫°o th√¥ng tin kh√°ch h√†ng cho Admin (ID: $($adminCustomerResponse.id))" -ForegroundColor Green
        } catch {
            if ($_.Exception.Response.StatusCode -eq 409) {
                Write-Host "‚ÑπÔ∏è Kh√°ch h√†ng Admin ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
            } else {
                Write-Host "‚ö†Ô∏è L·ªói t·∫°o kh√°ch h√†ng Admin: $($_.Exception.Message)" -ForegroundColor Yellow
            }
        }
        
        # Regular customer
        $regularCustomer = @{
            firstName = "Tr·∫ßn"
            lastName = "Th·ªã User"
            email = "user@kienlongbank.com"
            phoneNumber = "0987654321"
            address = "456 ƒê∆∞·ªùng L√™ L·ª£i, Q3, TP.HCM"
            dateOfBirth = "1990-05-20"
            identityNumber = "987654321"
        } | ConvertTo-Json
        
        try {
            $regularCustomerResponse = Invoke-RestMethod -Uri "http://localhost:8082/api/customers" -Method Post -Body $regularCustomer -Headers $apiHeaders
            Write-Host "‚úÖ ƒê√£ t·∫°o th√¥ng tin kh√°ch h√†ng cho User (ID: $($regularCustomerResponse.id))" -ForegroundColor Green
        } catch {
            if ($_.Exception.Response.StatusCode -eq 409) {
                Write-Host "‚ÑπÔ∏è Kh√°ch h√†ng User ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
            } else {
                Write-Host "‚ö†Ô∏è L·ªói t·∫°o kh√°ch h√†ng User: $($_.Exception.Message)" -ForegroundColor Yellow
            }
        }
        
        # Create sample accounts
        Write-Host "üè¶ T·∫°o t√†i kho·∫£n ng√¢n h√†ng m·∫´u..." -ForegroundColor Yellow
        
        # Admin account
        $adminAccount = @{
            accountNumber = "001234567890"
            accountType = "SAVINGS"
            balance = 10000000
            customerId = if ($adminCustomerResponse.id) { $adminCustomerResponse.id } else { 1 }
        } | ConvertTo-Json
        
        try {
            $adminAccountResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/accounts" -Method Post -Body $adminAccount -Headers $apiHeaders
            Write-Host "‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n cho Admin: 001234567890" -ForegroundColor Green
        } catch {
            if ($_.Exception.Response.StatusCode -eq 409) {
                Write-Host "‚ÑπÔ∏è T√†i kho·∫£n Admin ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
            } else {
                Write-Host "‚ö†Ô∏è L·ªói t·∫°o t√†i kho·∫£n Admin: $($_.Exception.Message)" -ForegroundColor Yellow
            }
        }
        
        # Regular user account
        $regularAccount = @{
            accountNumber = "009876543210"
            accountType = "CHECKING"
            balance = 5000000
            customerId = if ($regularCustomerResponse.id) { $regularCustomerResponse.id } else { 2 }
        } | ConvertTo-Json
        
        try {
            $regularAccountResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/accounts" -Method Post -Body $regularAccount -Headers $apiHeaders
            Write-Host "‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n cho User: 009876543210" -ForegroundColor Green
        } catch {
            if ($_.Exception.Response.StatusCode -eq 409) {
                Write-Host "‚ÑπÔ∏è T√†i kho·∫£n User ƒë√£ t·ªìn t·∫°i" -ForegroundColor Blue
            } else {
                Write-Host "‚ö†Ô∏è L·ªói t·∫°o t√†i kho·∫£n User: $($_.Exception.Message)" -ForegroundColor Yellow
            }
        }
        
        Write-Host "‚úÖ Setup th√¥ng tin kh√°ch h√†ng ho√†n t·∫•t!" -ForegroundColor Green
        
    } catch {
        Write-Host "‚ö†Ô∏è L·ªói trong qu√° tr√¨nh setup customer data: $($_.Exception.Message)" -ForegroundColor Yellow
        Write-Host "üí° B·∫°n c√≥ th·ªÉ t·∫°o customer data th·ªß c√¥ng sau khi services ch·∫°y ·ªïn ƒë·ªãnh" -ForegroundColor Blue
    }
}

Write-Host ""
Write-Host "üéâ C·∫•u h√¨nh Keycloak Phone Authentication ho√†n t·∫•t!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã C·∫•u h√¨nh ƒë√£ t·∫°o:" -ForegroundColor Cyan
Write-Host "   Realm: Kienlongbank (Phone Authentication enabled)" -ForegroundColor White
Write-Host "   Frontend Client: klb-frontend (public)" -ForegroundColor White
Write-Host "   Backend Client: klb-backend-api (confidential)" -ForegroundColor White
Write-Host "   Roles: USER, ADMIN" -ForegroundColor White
Write-Host "   Admin User: 0901234567 / admin123 (ADMIN role)" -ForegroundColor White
Write-Host "   Regular User: 0987654321 / password123 (USER role)" -ForegroundColor White
Write-Host "   Keycloak URL: http://localhost:8090" -ForegroundColor White
Write-Host ""
Write-Host "üë• Th√¥ng tin kh√°ch h√†ng ƒë√£ t·∫°o:" -ForegroundColor Cyan
Write-Host "   Admin: Nguy·ªÖn VƒÉn Admin (SƒêT: 0901234567)" -ForegroundColor White
Write-Host "   User: Tr·∫ßn Th·ªã User (SƒêT: 0987654321)" -ForegroundColor White
Write-Host "   T√†i kho·∫£n Admin: 001234567890 (S·ªë d∆∞: 10,000,000 VND)" -ForegroundColor White
Write-Host "   T√†i kho·∫£n User: 009876543210 (S·ªë d∆∞: 5,000,000 VND)" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ test ƒëƒÉng nh·∫≠p b·∫±ng s·ªë ƒëi·ªán tho·∫°i!" -ForegroundColor Green
Write-Host ""
Write-Host "üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:" -ForegroundColor Yellow
Write-Host "   - S·ª≠ d·ª•ng s·ªë ƒëi·ªán tho·∫°i thay v√¨ username ƒë·ªÉ ƒëƒÉng nh·∫≠p" -ForegroundColor White
Write-Host "   - Test v·ªõi admin: 0901234567 / admin123" -ForegroundColor White
Write-Host "   - Test v·ªõi user: 0987654321 / password123" -ForegroundColor White
Write-Host "   - Frontend: http://localhost:3000" -ForegroundColor White
Write-Host "   - Backend c√≥ th·ªÉ x·ª≠ l√Ω c·∫£ username v√† phoneNumber" -ForegroundColor White
